AWSTemplateFormatVersion: 2010-09-09
Description: "lambda API Gateway Sample"


Parameters:

  restApiName:
    Description: "The Name of our Rest api"
    Type: String
    Default: "CardApiCfn"

  lambdas3Bucket:
    Description: "S3 Bucket of the lambda Function"
    Type: String
    Default: "mdr-trn-cfn-scripts"

  #galing eto sa s3-lambda-sqs-v3.yml sa producer tas pinalitan lang pangalan then cinopy pati yung sa lambdaFunction tsaka lambdaFunctionRole then pinalitan pangalan


  # Card List Lambda params
  listFunctionName:
    Description: "Card List Lambda Function Name"
    Type: String
    Default: fnCardListApiCfn

  listLambdaZipFile:
    Description: "Lambda List Zip File in the bucket's lambda/folder"
    Type: String
    Default: "fn_card_list_cfn-v0.zip"

  listLambdaHandler:
    Description: "Lambda List handler function name"
    Type: String
    Default: "fn_card_list_cfn.lambda_handler"


# Card Status Update Lambda params
  statusFunctionName:
    Description: "Card Status Update Lambda Function Name"
    Type: String
    Default: fnCardStatusApiCfn

  statusLambdaZipFile:
    Description: "Lambda Status Update Zip File in the bucket's lambda/folder"
    Type: String
    Default: "fn_card_status_update_cfn-v0.zip"

  statusLambdaHandler:
    Description: "Lambda Status Update handler function name"
    Type: String
    Default: "fn_card_status_update_cfn.lambda_handler"

# Card Register Lambda params
  registerFunctionName:
    Description: "Card Register Lambda Function Name"
    Type: String
    Default: fnCardRegisterApiCfn

  registerLambdaZipFile:
    Description: "Lambda Register Zip File in the bucket's lambda/folder"
    Type: String
    Default: "fn_card_reg_cfn-v0.zip"

  registerLambdaHandler:
    Description: "Lambda Register handler function name"
    Type: String
    Default: "fn_card_reg_cfn.lambda_handler"


#Resources
Resources: 

  #restapi Resources
  restApi:
    Type: AWS::ApiGateway::RestApi
    Properties:

      Description: "Sample Rest API using CFN"
      
      Name: !Ref restApiName


  listApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt restApi.RootResourceId
      PathPart: list
      RestApiId: !Ref restApi

  registerApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt restApi.RootResourceId
      PathPart: register
      RestApiId: !Ref restApi


  statusApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt restApi.RootResourceId
      PathPart: "update-status"
      RestApiId: !Ref restApi


  # List Lambda functions


  #listLambdaFunction and Roles
  listLambdaFunction:
    Type: AWS::CloudFormation::Stack
    Properties:

      TemplateURL: "https://mdr-trn-cfn-scripts.s3.us-east-1.amazonaws.com/template/lambda-function.yml"

      Parameters:
        functionName: !Ref listFunctionName
        s3Bucket: !Ref lambdas3Bucket
        lambdaZipFile:  !Ref listLambdaZipFile
        functionDescription: "Card API List Function using nested stacks"
        functionHandler: !Ref listLambdaHandler


  # Card Status Lambda Functions
  statusLambdaFunction:
    Type: AWS::CloudFormation::Stack
    Properties:

      TemplateURL: "https://mdr-trn-cfn-scripts.s3.us-east-1.amazonaws.com/template/lambda-function.yml"

      Parameters:
        functionName: !Ref statusFunctionName
        s3Bucket: !Ref lambdas3Bucket
        lambdaZipFile:  !Ref statusLambdaZipFile
        functionDescription: "Card API List Function using nested stacks"
        functionHandler: !Ref statusLambdaHandler


  # Register Card lambda Function
  registerLambdaFunction:
    Type: AWS::CloudFormation::Stack
    Properties:

      TemplateURL: "https://mdr-trn-cfn-scripts.s3.us-east-1.amazonaws.com/template/lambda-function.yml"

      Parameters:
        functionName: !Ref registerFunctionName
        s3Bucket: !Ref lambdas3Bucket
        lambdaZipFile:  !Ref registerLambdaZipFile
        functionDescription: "Card API List Function using nested stacks"
        functionHandler: !Ref registerLambdaHandler


  # This is a  List API lambda method integration
  listRestMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false

      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        Uri: !Join ["",["arn:aws:apigateway:",!Ref "AWS::Region",":lambda:path/2015-03-31/functions/", !GetAtt listLambdaFunction.Outputs.FunctionArn, "/invocations"]]
      ResourceId: !Ref listApiResource
      RestApiId: !Ref restApi


  #Card Status API lambda method integration
  statusRestMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false

      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        Uri: !Join ["",["arn:aws:apigateway:",!Ref "AWS::Region",":lambda:path/2015-03-31/functions/", !GetAtt statusLambdaFunction.Outputs.FunctionArn, "/invocations"]]
      ResourceId: !Ref statusApiResource
      RestApiId: !Ref restApi


  #Card Register API lambda method integration
  registerRestMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false

      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        Uri: !Join ["",["arn:aws:apigateway:",!Ref "AWS::Region",":lambda:path/2015-03-31/functions/", !GetAtt registerLambdaFunction.Outputs.FunctionArn, "/invocations"]]
      ResourceId: !Ref registerApiResource
      RestApiId: !Ref restApi

  #Rest Api Stage
  restApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      
      DeploymentId: !Ref restApiStageDeployment
      Description: "Dev deployment stage"
      
      MethodSettings: 

        - HttpMethod: "*"
          ResourcePath: "/*"

      RestApiId: !Ref restApi
      StageName: "dev"

  #Rest Api Deployment
  restApiStageDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - listRestMethod
      - statusRestMethod
      - registerRestMethod
    Properties:
      RestApiId: !Ref restApi
      #StageName: "dev"   



  # Lambda Permission for CARD List API
  listApiLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction" 
      FunctionName: !GetAtt listLambdaFunction.Outputs.FunctionArn
      #Trigger
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Join ["",["arn:aws:execute-api:",!Ref "AWS::Region",":",!Ref "AWS::AccountId",":",!Ref restApi,"/*"]]


  # Lambda Permission for CARD Status update API
  statusApiLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction" 
      FunctionName: !GetAtt statusLambdaFunction.Outputs.FunctionArn
      #Trigger
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Join ["",["arn:aws:execute-api:",!Ref "AWS::Region",":",!Ref "AWS::AccountId",":",!Ref restApi,"/*"]]

  # Lambda Permission for CARD Register API
  registerApiLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction" 
      FunctionName: !GetAtt registerLambdaFunction.Outputs.FunctionArn
      #Trigger
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Join ["",["arn:aws:execute-api:",!Ref "AWS::Region",":",!Ref "AWS::AccountId",":",!Ref restApi,"/*"]]


  # DynamoDB
  cardDatabaseTable:
    Type: AWS::DynamoDB::Table
    Properties:

      AttributeDefinitions: 
        - AttributeName: "card_no"
          AttributeType: "S"

      KeySchema: # Required
        - AttributeName: "card_no"
          KeyType: "HASH"

      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

      TableClass: "STANDARD"
      TableName: "card_account_cfn"

  # IAM POLICY
  cardDatabaseTablePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "card_account_read_write_cfn" # Required
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
              - "dynamodb:Scan"
              - "dynamodb:GetItem"
            Resource: !GetAtt cardDatabaseTable.Arn

      Roles:
        - !GetAtt listLambdaFunction.Outputs.IAMRole
        - !GetAtt statusLambdaFunction.Outputs.IAMRole
        - !GetAtt registerLambdaFunction.Outputs.IAMRole
